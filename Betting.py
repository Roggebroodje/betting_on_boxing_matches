{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "\n",
      "====== WebDriver manager ======\n",
      "Current google-chrome version is 97.0.4692\n",
      "Get LATEST chromedriver version for 97.0.4692 google-chrome\n",
      "Driver [C:\\Users\\Dell\\.wdm\\drivers\\chromedriver\\win32\\97.0.4692.71\\chromedriver.exe] found in cache\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Date</th>\n",
       "      <th>Boxer 1</th>\n",
       "      <th>Boxer 2</th>\n",
       "      <th>Best odds boxer 1</th>\n",
       "      <th>Odds 1 at</th>\n",
       "      <th>Best odds boxer 2</th>\n",
       "      <th>Odds 2 at</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1/30/22</td>\n",
       "      <td>Ilunga Makabu</td>\n",
       "      <td>Thabiso Mchunu</td>\n",
       "      <td>1.74</td>\n",
       "      <td>bet365</td>\n",
       "      <td>2.2</td>\n",
       "      <td>bwin</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1/30/22</td>\n",
       "      <td>Trevor Bryan</td>\n",
       "      <td>Jonathan Guidry</td>\n",
       "      <td>1.06</td>\n",
       "      <td>bwin</td>\n",
       "      <td>11.0</td>\n",
       "      <td>bet365</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1/30/22</td>\n",
       "      <td>Xavier Martinez</td>\n",
       "      <td>Robson Conceicao</td>\n",
       "      <td>1.8</td>\n",
       "      <td>bwin</td>\n",
       "      <td>2.15</td>\n",
       "      <td>jacks</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2/5/22</td>\n",
       "      <td>Chris Eubank Jnr</td>\n",
       "      <td>Liam Williams</td>\n",
       "      <td>1.36</td>\n",
       "      <td>bwin</td>\n",
       "      <td>3.4</td>\n",
       "      <td>bet365</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2/6/22</td>\n",
       "      <td>Keith Thurman</td>\n",
       "      <td>Mario Barrios</td>\n",
       "      <td>1.57</td>\n",
       "      <td>bwin</td>\n",
       "      <td>2.45</td>\n",
       "      <td>wallace</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>2/12/22</td>\n",
       "      <td>Daniel Jacobs</td>\n",
       "      <td>John Ryder</td>\n",
       "      <td>1.57</td>\n",
       "      <td>bwin</td>\n",
       "      <td>2.6</td>\n",
       "      <td>jacks</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>2/19/22</td>\n",
       "      <td>Kell Brook</td>\n",
       "      <td>Amir Khan</td>\n",
       "      <td>1.6</td>\n",
       "      <td>jacks</td>\n",
       "      <td>2.38</td>\n",
       "      <td>wallace</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>2/26/22</td>\n",
       "      <td>Josh Taylor</td>\n",
       "      <td>Jack Catterall</td>\n",
       "      <td>1.11</td>\n",
       "      <td>bwin</td>\n",
       "      <td>8.5</td>\n",
       "      <td>jacks</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>2/27/22</td>\n",
       "      <td>Lawrence Okolie</td>\n",
       "      <td>Michal Cieslak</td>\n",
       "      <td>1.12</td>\n",
       "      <td>bwin</td>\n",
       "      <td>6.5</td>\n",
       "      <td>jacks</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>3/12/22</td>\n",
       "      <td>Michael Conlan</td>\n",
       "      <td>Leigh Wood</td>\n",
       "      <td>1.62</td>\n",
       "      <td>bwin</td>\n",
       "      <td>2.4</td>\n",
       "      <td>jacks</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>3/26/22</td>\n",
       "      <td>Josh Warrington</td>\n",
       "      <td>Kiko Martinez</td>\n",
       "      <td>1.25</td>\n",
       "      <td>bwin</td>\n",
       "      <td>4.25</td>\n",
       "      <td>wallace</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>5/1/22</td>\n",
       "      <td>Katie Taylor</td>\n",
       "      <td>Amanda Serrano</td>\n",
       "      <td>1.87</td>\n",
       "      <td>jacks</td>\n",
       "      <td>2.1</td>\n",
       "      <td>bwin</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>2022-01-30</td>\n",
       "      <td>Giron Rene Tellez</td>\n",
       "      <td>Melendez Luis</td>\n",
       "      <td>1.35</td>\n",
       "      <td>jacks</td>\n",
       "      <td>3.75</td>\n",
       "      <td>bet365</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>6/02/2022</td>\n",
       "      <td>Ramírez José Carlos</td>\n",
       "      <td>Pedraza Jose</td>\n",
       "      <td>1.17</td>\n",
       "      <td>jacks</td>\n",
       "      <td>5.0</td>\n",
       "      <td>jacks</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>27/02/2022</td>\n",
       "      <td>Colbert Chris</td>\n",
       "      <td>Gutierrez Roger</td>\n",
       "      <td>1.1</td>\n",
       "      <td>jacks</td>\n",
       "      <td>7.0</td>\n",
       "      <td>bet365</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>20/03/2022</td>\n",
       "      <td>Ortiz Jr Vergil</td>\n",
       "      <td>McKinson Michael</td>\n",
       "      <td>1.1</td>\n",
       "      <td>bet365</td>\n",
       "      <td>7.5</td>\n",
       "      <td>jacks</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>29/01/2022</td>\n",
       "      <td>Fedor Papazov</td>\n",
       "      <td>Akzhol Sulaimanbek Uulu</td>\n",
       "      <td>1.57</td>\n",
       "      <td>wallace</td>\n",
       "      <td>2.37</td>\n",
       "      <td>bet365</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>30/01/2022</td>\n",
       "      <td>Giovanni Cabrera</td>\n",
       "      <td>Rafael Reyes</td>\n",
       "      <td>1.062</td>\n",
       "      <td>bet365</td>\n",
       "      <td>8.5</td>\n",
       "      <td>bet365</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>30/01/2022</td>\n",
       "      <td>Nico Ali Walsh</td>\n",
       "      <td>Jeremiah Yeager</td>\n",
       "      <td>1.03</td>\n",
       "      <td>bet365</td>\n",
       "      <td>12.0</td>\n",
       "      <td>bet365</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>30/01/2022</td>\n",
       "      <td>Stephan Shaw</td>\n",
       "      <td>Joey Dawejko</td>\n",
       "      <td>1.05</td>\n",
       "      <td>bet365</td>\n",
       "      <td>10.0</td>\n",
       "      <td>bet365</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>20/03/2022</td>\n",
       "      <td>Jermell Charlo</td>\n",
       "      <td>Brian Carlos Castano</td>\n",
       "      <td>1.87</td>\n",
       "      <td>wallace</td>\n",
       "      <td>1.87</td>\n",
       "      <td>wallace</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>6/03/2022</td>\n",
       "      <td>Juan Francisco Estrada</td>\n",
       "      <td>Roman Gonzalez</td>\n",
       "      <td>1.87</td>\n",
       "      <td>wallace</td>\n",
       "      <td>1.87</td>\n",
       "      <td>wallace</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>31/12/2022</td>\n",
       "      <td>Oleksandr Usyk</td>\n",
       "      <td>Anthony Joshua</td>\n",
       "      <td>1.63</td>\n",
       "      <td>wallace</td>\n",
       "      <td>2.18</td>\n",
       "      <td>wallace</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>31/12/2022</td>\n",
       "      <td>Oleksandr Usyk</td>\n",
       "      <td>Tyson Fury</td>\n",
       "      <td>2.75</td>\n",
       "      <td>wallace</td>\n",
       "      <td>1.45</td>\n",
       "      <td>wallace</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          Date                  Boxer 1                   Boxer 2  \\\n",
       "0      1/30/22           Ilunga Makabu             Thabiso Mchunu   \n",
       "1      1/30/22            Trevor Bryan            Jonathan Guidry   \n",
       "2      1/30/22         Xavier Martinez           Robson Conceicao   \n",
       "3       2/5/22        Chris Eubank Jnr              Liam Williams   \n",
       "4       2/6/22           Keith Thurman              Mario Barrios   \n",
       "5      2/12/22           Daniel Jacobs                 John Ryder   \n",
       "6      2/19/22              Kell Brook                  Amir Khan   \n",
       "7      2/26/22             Josh Taylor             Jack Catterall   \n",
       "8      2/27/22         Lawrence Okolie             Michal Cieslak   \n",
       "9      3/12/22          Michael Conlan                 Leigh Wood   \n",
       "10     3/26/22         Josh Warrington              Kiko Martinez   \n",
       "11      5/1/22            Katie Taylor             Amanda Serrano   \n",
       "12  2022-01-30       Giron Rene Tellez              Melendez Luis   \n",
       "13   6/02/2022     Ramírez José Carlos               Pedraza Jose   \n",
       "14  27/02/2022           Colbert Chris            Gutierrez Roger   \n",
       "15  20/03/2022         Ortiz Jr Vergil           McKinson Michael   \n",
       "16  29/01/2022           Fedor Papazov    Akzhol Sulaimanbek Uulu   \n",
       "17  30/01/2022        Giovanni Cabrera               Rafael Reyes   \n",
       "18  30/01/2022          Nico Ali Walsh            Jeremiah Yeager   \n",
       "19  30/01/2022            Stephan Shaw               Joey Dawejko   \n",
       "20  20/03/2022          Jermell Charlo       Brian Carlos Castano   \n",
       "21   6/03/2022  Juan Francisco Estrada             Roman Gonzalez   \n",
       "22  31/12/2022          Oleksandr Usyk             Anthony Joshua   \n",
       "23  31/12/2022          Oleksandr Usyk                 Tyson Fury   \n",
       "\n",
       "   Best odds boxer 1 Odds 1 at Best odds boxer 2 Odds 2 at  \n",
       "0               1.74    bet365               2.2      bwin  \n",
       "1               1.06      bwin              11.0    bet365  \n",
       "2                1.8      bwin              2.15     jacks  \n",
       "3               1.36      bwin               3.4    bet365  \n",
       "4               1.57      bwin              2.45   wallace  \n",
       "5               1.57      bwin               2.6     jacks  \n",
       "6                1.6     jacks              2.38   wallace  \n",
       "7               1.11      bwin               8.5     jacks  \n",
       "8               1.12      bwin               6.5     jacks  \n",
       "9               1.62      bwin               2.4     jacks  \n",
       "10              1.25      bwin              4.25   wallace  \n",
       "11              1.87     jacks               2.1      bwin  \n",
       "12              1.35     jacks              3.75    bet365  \n",
       "13              1.17     jacks               5.0     jacks  \n",
       "14               1.1     jacks               7.0    bet365  \n",
       "15               1.1    bet365               7.5     jacks  \n",
       "16              1.57   wallace              2.37    bet365  \n",
       "17             1.062    bet365               8.5    bet365  \n",
       "18              1.03    bet365              12.0    bet365  \n",
       "19              1.05    bet365              10.0    bet365  \n",
       "20              1.87   wallace              1.87   wallace  \n",
       "21              1.87   wallace              1.87   wallace  \n",
       "22              1.63   wallace              2.18   wallace  \n",
       "23              2.75   wallace              1.45   wallace  "
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# importing packages (they need to be installed before you can run this part)\n",
    "from selenium import webdriver\n",
    "from selenium.webdriver.common.by import By\n",
    "from selenium.webdriver.chrome.service import Service\n",
    "from webdriver_manager.chrome import ChromeDriverManager\n",
    "from bs4 import BeautifulSoup as bs\n",
    "import pyautogui\n",
    "import pandas as pd\n",
    "import datetime\n",
    "import numpy as np\n",
    "\n",
    "# importing the 3 self-made functions from Function.py file (only works when file is .py extension)\n",
    "from Functions import name_matching, box_joining, box_betting\n",
    "\n",
    "# Initial settings (and opening a chrome webbrower)\n",
    "driver = webdriver.Chrome(service=Service(ChromeDriverManager().install()))\n",
    "driver.implicitly_wait(30) # 'driver' will wait a maximum of 30 seconds for pages to load.\n",
    "\n",
    "# Importing the information\n",
    "#\n",
    "# 4 different betting website are used.\n",
    "# only 1 page per website is accessed (for minimal traffic)\n",
    "#\n",
    "# although the driver has an implicit waiting time,\n",
    "# I found that even when a page is loaded does not (always) mean that all the content is loaded as well.\n",
    "# therefor an extra explicit waiting time is incorporated using the pyautogui.sleep function\n",
    "# most errors accured with wallacebet and the jacks website.\n",
    "\n",
    "# import from https://sports.bwin.com\n",
    "driver.get(\"https://sports.bwin.com/en/sports/boxing-24\")\n",
    "pyautogui.sleep(10)\n",
    "element_bwin = driver.find_element(By.CSS_SELECTOR, \"ms-event-group.event-group\")\n",
    "response_bwin = element_bwin.get_attribute('innerHTML')\n",
    "\n",
    "# import from https://jacks.nl\n",
    "driver.get(\"https://jacks.nl/sports?gclid=Cj0KCQiA8vSOBhCkARIsAGdp6RTD2gZe5vGv-keHZOCzae5eNw86uxCmmZytPFaYbzW0yRCntiHpxL0aAsLnEALw_wcB#sports-hub/boxing\")\n",
    "pyautogui.sleep(15)\n",
    "element_jacks = driver.find_element(By.CSS_SELECTOR, \"ul.KambiBC-sandwich-filter__list\")\n",
    "response_jacks = element_jacks.get_attribute('innerHTML')\n",
    "\n",
    "# import from https://www.bet365.nl\n",
    "driver.get(\"https://www.bet365.nl/#/AC/B9/C20007979/D1/E148/F2/\")\n",
    "pyautogui.sleep(10)\n",
    "element_bet365 = driver.find_element(By.CSS_SELECTOR, \"div.wcl-CommonElementStyle_PrematchCenter \")\n",
    "response_bet365 = element_bet365.get_attribute('innerHTML')\n",
    "\n",
    "# import from https://www.wallacebet.com\n",
    "driver.get(\"https://www.wallacebet.com/pre-match#/Boxing/World/13301/19256588\")\n",
    "pyautogui.sleep(15)\n",
    "element_wallacebet = driver.find_element(By.ID, \"eventListBody\")   \n",
    "response_wallacebet = element_wallacebet.get_attribute('innerHTML')\n",
    "\n",
    "# driver closing\n",
    "driver.close() # closing the chrome webbrowser \n",
    "\n",
    "# transforming the imported information into a 'Beautiful Soup' object\n",
    "bet365_soup = bs(response_bet365)\n",
    "bwin_soup = bs(response_bwin)\n",
    "jacks_soup = bs(response_jacks)\n",
    "wallacebet_soup = bs(response_wallacebet)\n",
    "\n",
    "# creating empty lists to store the specific information from the websites\n",
    "date = []\n",
    "boxers = []\n",
    "websites = []\n",
    "win_1 = []\n",
    "draw = []\n",
    "win_2 = []\n",
    "\n",
    "# Below four separate loops are created with their own unique code.\n",
    "# all codes use BeautifulSoup4 to extract HTML information from the specific pages (now saved as an object)\n",
    "# it was not possible to create one general function that could be used on all four different websites.\n",
    "\n",
    "# extracting information from https://sports.bwin.com BeautifulSoup object\n",
    "for i in range(len(bwin_soup.find_all('ms-event',class_ = \"grid-event ms-active-highlight\"))):\n",
    "\n",
    "    li = bwin_soup.find_all('ms-event',class_ = \"grid-event ms-active-highlight\")[i]\n",
    "    #date\n",
    "    date.append(li.find(\"ms-prematch-timer\", class_ = \"starting-time timer-badge\").get_text().split(' ')[0])\n",
    "    #boxers    \n",
    "    name_1 = ''\n",
    "    name_2 = ''\n",
    "    names = li.find_all('div', class_ = \"participant\")\n",
    "    name_1 = str(names[0]).split('<span')[0]\n",
    "    name_1 = name_1.split('>')[1]\n",
    "    name_2 = str(names[1]).split('<span')[0]\n",
    "    name_2 = name_2.split('>')[1]\n",
    "    boxers.append(name_1 + ' | ' + name_2)\n",
    "    # website\n",
    "    websites.append('bwin')\n",
    "    #odds\n",
    "    odds = li.find_all(\"div\", class_ = \"option option-value\")\n",
    "    win_1.append(float(odds[0].get_text()))\n",
    "    draw.append(float(odds[1].get_text()))\n",
    "    win_2.append(float(odds[2].get_text()))\n",
    "\n",
    "# check on whether lenghts of lists are still equal if not something went wrong\n",
    "# possibly with loading in the page fully,\n",
    "# possibly the website changed its HTML code.\n",
    "if not (len(websites) == len(date) == len(boxers) == len(win_1) == len(win_2) == len(draw)):\n",
    "    print('Something went wrong at/with https://sports.bwin.com')\n",
    "    \n",
    "# extracting information from https://jacks.nl BeautifulSoup object\n",
    "\n",
    "# extra function used to calculate upcoming dates\n",
    "def next_day(given_date, weekday):\n",
    "    day_shift = (weekday - given_date.weekday()) % 7\n",
    "    return given_date + datetime.timedelta(days=day_shift)\n",
    "now = datetime.datetime.today().date()\n",
    "\n",
    "for i in range(len(jacks_soup.find_all('li',class_ = \"KambiBC-sandwich-filter__event-list-item\"))):\n",
    "\n",
    "    li = jacks_soup.find_all('li',class_ = \"KambiBC-sandwich-filter__event-list-item\")[i]\n",
    "    # date\n",
    "    temp_date = (li.find('span', class_ = 'KambiBC-event-item__start-time--date').get_text())\n",
    "    \n",
    "    if temp_date in ['ma','di','wo','do','vr','za','zo']:\n",
    "        temp_date = temp_date.replace('ma','0').replace('di','1').replace('wo','2').replace('do','3').replace('vr','4').replace('za','5').replace('zo','6')\n",
    "        temp_date = float(temp_date)\n",
    "        temp_date = str(next_day(now, temp_date))\n",
    "    else:\n",
    "        temp_date = temp_date.replace(' jan.','/01').replace(' feb.','/02').replace(' mrt.','/03').replace(' apr.','/04').replace(' mei','/05').replace(' jun.','/06')\n",
    "        temp_date = temp_date.replace(' jul.','/07').replace(' aug.','/08').replace(' sep.','09').replace(' okt.','/10').replace(' nov','/11').replace(' dec.','/12')\n",
    "        temp_date = temp_date + '/' + str(datetime.date.today().year)\n",
    "        \n",
    "    date.append(temp_date)\n",
    "    # boxers\n",
    "    name_1 = ''\n",
    "    name_2 = ''\n",
    "    names = li.find_all('div', class_ = \"KambiBC-event-participants__name\")\n",
    "    name_1 = name_1.join([letter for letter in names[0].get_text() if letter.isalnum() or letter.isspace()])\n",
    "    name_2 = name_2.join([letter for letter in names[1].get_text() if letter.isalnum() or letter.isspace()])\n",
    "    boxers.append(name_1 + ' | ' + name_2)\n",
    "    # websites\n",
    "    websites.append('jacks')\n",
    "    # odds\n",
    "    odds = li.select(\"div[class^=OutcomeButton__Odds-sc-]\")\n",
    "    if len(odds) == 3:\n",
    "        win_1.append(float(odds[0].get_text()))\n",
    "        draw.append(float(odds[1].get_text()))\n",
    "        win_2.append(float(odds[2].get_text()))\n",
    "    elif len(odds) == 2:\n",
    "        win_1.append(float(odds[0].get_text()))\n",
    "        draw.append(0)\n",
    "        win_2.append(float(odds[1].get_text()))\n",
    "        \n",
    "# check on whether lenghts of lists are still equal if not something went wrong\n",
    "# possibly with loading in the page fully,\n",
    "# possibly the website changed its HTML code.\n",
    "if not (len(websites) == len(date) == len(boxers) == len(win_1) == len(win_2) == len(draw)):\n",
    "    print('Something went wrong at/with https://jacks.nl')  \n",
    "    \n",
    "\n",
    "# extracting information from https://www.bet365.nl BeautifulSoup object\n",
    "date_table = bet365_soup.select(\"div[class*=sgl-MarketFixtureDet]\")[0]\n",
    "stuff = [\"rcl-MarketHeaderLabel rcl-MarketHeaderLabel-isdate\",\n",
    "         \"rcl-ParticipantFixtureDetails_BookCloses\",\n",
    "        \"rcl-MarketHeaderLabel-isdate rcl-MarketHeaderLabel\"]\n",
    "days_times = date_table.find_all(\"div\", class_= stuff)\n",
    "\n",
    "for i in range(len(days_times)):\n",
    "    if len(days_times[i].get_text()) > 6:\n",
    "        continue\n",
    "    elif len(days_times[i - 1].get_text()) > 6:\n",
    "        temp_date = days_times[i - 1].get_text().partition(\" \")[2]\n",
    "        temp_date = temp_date.replace(' jan','/01/').replace(' feb','/02/').replace(' mrt','/03/').replace(' apr','/04/').replace(' mei','/05/').replace(' jun','/06/')\n",
    "        temp_date = temp_date.replace(' jul','/07/').replace(' aug','/08/').replace(' sep','09/').replace(' okt','/10/').replace(' nov','/11/').replace(' dec','/12/')\n",
    "        temp_date = temp_date + str(datetime.date.today().year)\n",
    "        date.append(temp_date)\n",
    "    else:\n",
    "        date.append(temp_date)\n",
    "# boxers\n",
    "for i in range(0,len(bet365_soup.select(\"div.rcl-ParticipantFixtureDetailsTeam_TeamName\")),2):\n",
    "    name_1 = bet365_soup.select(\"div.rcl-ParticipantFixtureDetailsTeam_TeamName\")[i].get_text()\n",
    "    name_2 = bet365_soup.select(\"div.rcl-ParticipantFixtureDetailsTeam_TeamName\")[i + 1].get_text()\n",
    "    boxers.append(name_1 + ' | ' + name_2)\n",
    "#website\n",
    "for i in range(int(len(bet365_soup.select(\"div.rcl-ParticipantFixtureDetailsTeam_TeamName\")) / 2)):\n",
    "    websites.append(\"bet365\")\n",
    "# odds\n",
    "for i in range(int(len(bet365_soup.select(\"span.sgl-ParticipantOddsOnly80_Odds\")) / 2)):\n",
    "    win_1.append(float(bet365_soup.select(\"span.sgl-ParticipantOddsOnly80_Odds\")[i].get_text()))\n",
    "    win_2.append(float(bet365_soup.select(\"span.sgl-ParticipantOddsOnly80_Odds\")[i + int(len(bet365_soup.select(\"span.sgl-ParticipantOddsOnly80_Odds\")) / 2) ].get_text()))\n",
    "    draw.append(0)\n",
    "    \n",
    "# check on whether lenghts of lists are still equal if not something went wrong\n",
    "# possibly with loading in the page fully,\n",
    "# possibly the website changed its HTML code.\n",
    "if not (len(websites) == len(date) == len(boxers) == len(win_1) == len(win_2) == len(draw)):\n",
    "    print('Something went wrong at/with https://www.bet365.nl') \n",
    "\n",
    "\n",
    "# extracting information from https://www.wallacebet.nl BeautifulSoup object\n",
    "# creating a temporary data frame 'test_df' to order and store the wallace data correctly\n",
    "nr_events = len(wallacebet_soup.select(\"div[class*=sbEventsList__time]\"))\n",
    "categories = ['date','boxer','boxer','odds','odds']\n",
    "categories = (categories * nr_events)\n",
    "data = [''] * len(categories)\n",
    "test_df = pd.DataFrame({\n",
    "    'category':categories,\n",
    "    'wallace_data':data\n",
    "})\n",
    "\n",
    "if nr_events > 0:\n",
    "    # the actual data from wallace, using the complete string object\n",
    "    wallace_data = []\n",
    "    unwanted_symbols = [':','+']\n",
    "    for text in wallacebet_soup.get_text().split(\"\\n\"):\n",
    "            if not any(unw in text for unw in unwanted_symbols):\n",
    "                if text.strip() != \"\" and (len(text.strip()) > 1):\n",
    "                    wallace_data.append(text.strip())\n",
    "\n",
    "    # categorizing the different data into 'date', 'odds' or 'boxer'\n",
    "    actual_categories = []\n",
    "    for text in wallace_data:\n",
    "        if ',' in text and '20' in text:\n",
    "            actual_categories.append('date')\n",
    "        elif text.replace(\".\",\"\").isdecimal() and len(text) < 7:\n",
    "            actual_categories.append('odds')\n",
    "        else:\n",
    "            actual_categories.append('boxer')\n",
    "\n",
    "    # putting the actual wallace data into the temporary data frame 'test_df'\n",
    "    # based on their categories, if a category is missing the data holder is filled with \"\" (empty string)\n",
    "    counter = 0\n",
    "    for row in range(len(test_df)):\n",
    "        if test_df['category'][row] == actual_categories[counter]:\n",
    "            test_df.at[row, 'wallace_data'] = wallace_data[counter]\n",
    "            counter += 1\n",
    "        else:\n",
    "            test_df.at[i, 'wallace_data'] = \"\"\n",
    "\n",
    "    # replacing empty date places with the last findable date\n",
    "    for row in range(len(test_df)):      \n",
    "        if test_df['category'][row] == 'date' and test_df['wallace_data'][row] == \"\":\n",
    "            test_df.at[row,'wallace_data'] = test_df['wallace_data'][(row - 5)]\n",
    "\n",
    "    # replacing written dates with numbers\n",
    "    temp_dates = [text.split(', ')[1].replace(' January ','/01/').replace(' February ','/02/')\\\n",
    "       .replace(' March ','/03/').replace(' April ','/04/').replace(' May ','/05/').replace(' June ','/06/')\\\n",
    "        .replace(' July ','/07/').replace(' August ','/08/').replace(' September ','09/').replace(' October ','/10/')\\\n",
    "        .replace(' November ','/11/').replace(' December ','/12/')\\\n",
    "                  for text in test_df['wallace_data'].loc[test_df['category'] == 'date']]\n",
    "\n",
    "    counter = 0        \n",
    "    for row in range(len(test_df)):      \n",
    "        if test_df['category'][row] == 'date':\n",
    "            test_df.at[row,'wallace_data'] = temp_dates[counter]\n",
    "            counter += 1\n",
    "\n",
    "    # joining both boxer names into one row\n",
    "    for row in range(1,(len(test_df)),5):\n",
    "        if test_df['category'][row] == 'boxer':\n",
    "            temp_names = test_df['wallace_data'][row] + ' | ' + test_df['wallace_data'][row + 1]\n",
    "            test_df.at[row,'wallace_data'] = temp_names\n",
    "\n",
    "    # dropping the extra boxer name, as they are now in the same row already\n",
    "    drop_list = range(2,(len(test_df)),5)\n",
    "    test_df = test_df.drop(drop_list,axis=0).reset_index(drop=True)\n",
    "\n",
    "    drop_list = []\n",
    "    for row in range(1,(len(test_df)),4):\n",
    "        if test_df['wallace_data'][row] == \"\":\n",
    "            drop_list.append(row + 1)\n",
    "            drop_list.append(row)\n",
    "            drop_list.append(row - 1)\n",
    "            drop_list.append(row - 2)\n",
    "\n",
    "    test_df = test_df.drop(drop_list,axis=0).reset_index(drop=True)\n",
    "\n",
    "    # adding the values to the lists\n",
    "    for row in range(len(test_df)):\n",
    "        if test_df['category'][row] == 'date':\n",
    "            date.append(test_df['wallace_data'][row])\n",
    "        elif test_df['category'][row] == 'boxer':\n",
    "            boxers.append(test_df['wallace_data'][row])\n",
    "        elif test_df['category'][row] == 'odds' and test_df['category'][row - 1] != 'odds':\n",
    "                win_1.append(float(test_df['wallace_data'][row]))\n",
    "        elif test_df['category'][row] == 'odds' and test_df['category'][row - 1] == 'odds':\n",
    "                win_2.append(float(test_df['wallace_data'][row]))\n",
    "\n",
    "    for i in range(int((len(test_df)) / 4)):        \n",
    "        draw.append(0) \n",
    "        websites.append('wallace')\n",
    "\n",
    "    # check on whether lenghts of lists are still equal if not something went wrong\n",
    "    # possibly with loading in the page fully,\n",
    "    # possibly the website changed its HTML code.\n",
    "    if not (len(websites) == len(date) == len(boxers) == len(win_1) == len(win_2) == len(draw)):\n",
    "        print('Something went wrong at/with https://www.wallacebet.com')        \n",
    "    \n",
    "\n",
    "# putting the lists into a input data frame\n",
    "input_df = pd.DataFrame({\n",
    "    'date':date,\n",
    "    'A_boxers':boxers,\n",
    "    'A_website':websites,\n",
    "    'A_boxer_1_wins':win_1,\n",
    "    'A_draw':draw,\n",
    "    'A_boxer_2_wins':win_2\n",
    "})\n",
    "\n",
    "# using the input data frame for the box_betting input\n",
    "box_betting(input_df)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "nlp",
   "language": "python",
   "name": "nlp"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
